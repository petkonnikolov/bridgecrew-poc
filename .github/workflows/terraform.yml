name: 'Terraform'

on:
  push:
    # paths:
    #   - 'terraform'
  pull_request:
    # paths:
    #   - 'terraform'

env:
  TF_LOG: INFO

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure
    
    steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v2

        # Install the preferred version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1

        - name: Terraform Init
          id: init
          run: terraform init
          # -backend-config="access_key=$ARM_ACCESS_KEY"

        - name: Terraform Plan
          id: plan
          if: github.event_name == 'pull_request'
          run: terraform plan -no-color

        - name: add-plan-comment
          id: comment
          uses: actions/github-script@v3
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                      #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
                      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                      <details><summary>Show Plan</summary>

                      \`\`\`${process.env.PLAN}\`\`\`

                      </details>

                      *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

                      github.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                      })

        - name: Terraform Apply
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve
